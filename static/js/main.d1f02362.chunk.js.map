{"version":3,"sources":["components/InputTask.jsx","components/TaskDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","react_default","a","createElement","onSubmit","this","props","handleSubmit","onChange","handleChange","React","Component","TaskDisplay","_this","tasks","filter","task","type","tasksdone","map","done","length","tasksleft","onClick","clearDone","clearAll","style","color","index","key","marginBottom","value","doneTask","shiftUp","shiftDown","deleteTask","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","bind","assertThisInitialized","toggleDone","event","setState","target","preventDefault","charAt","concat","toConsumableArray","substring","console","log","splice","objectSpread","old_array","old_index","new_index","item","array","change","InputTask_Input","TaskDisplay_TaskDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1f02362.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Input extends React.Component {\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit}>\n        <input onChange={this.props.handleChange} />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class TaskDisplay extends React.Component {\n  render() {\n    let tasks = this.props.tasks.filter(task => task.type !== \"heading\");\n    let tasksdone = tasks.map(task => task.done).filter(task => task).length;\n    let tasksleft =\n      tasks.length - tasks.map(task => task.done).filter(task => task).length;\n\n    return (\n      <div>\n        {/* Buttons! */}\n        <button onClick={this.props.clearDone}>Clear Done</button>\n        <button onClick={this.props.clearAll}>Clear All</button>\n\n        <hr />\n\n        {/* Tasks status display */}\n        <h1>\n          Tasks - {tasksdone} done, <span style={{color: (tasksleft>0?'red':'green')}}>{tasksleft} left</span>. Total:{\" \"}\n          {tasks.length}\n        </h1>\n        <hr/>\n        {/* The actual Display of it */}\n        <ul>\n          {this.props.tasks.map((task, index) => (\n            <li key={index} style={{ marginBottom: \"2rem\" }}>\n              {task.type !== \"heading\" ? (\n                // If task is task, do this\n                <div>\n                  {/* text of task */}\n                  {task.done ? <strike>{task.value}</strike> : task.value}\n                  <br />\n\n                  {/* Toggling task's done status */}\n                  <button onClick={() => this.props.doneTask(index)}>\n                    {task.done ? \"Reopen\" : \"Finish\"}\n                  </button>\n                  <br />\n                  {/* Shifting up and down the task ladder */}\n                  <button onClick={() => this.props.shiftUp(index)}>Up</button>\n                  <button onClick={() => this.props.shiftDown(index)}>Down</button>\n                  <button onClick={()=> this.props.deleteTask(index) }>Delete</button>\n                </div>\n              ) : (\n                // If the task is a heading, create an h2\n                <div>\n                  <h2 style={{marginBottom:'0.25rem'}}>{task.value}</h2>\n                  <button onClick={() => this.props.shiftUp(index)}>Up</button>\n                  <button onClick={() => this.props.shiftDown(index)}>Down</button>\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/InputTask.jsx\";\nimport TaskDisplay from \"./components/TaskDisplay.jsx\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      input: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleDone = this.toggleDone.bind(this);\n    this.clearDone = this.clearDone.bind(this);\n    this.clearAll = this.clearAll.bind(this);\n    this.shiftUp = this.shiftUp.bind(this);\n    this.shiftDown = this.shiftDown.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n  }\n\n  // Handle Events\n  handleChange(event) {\n    this.setState({ input: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.state.input.charAt(0) !== \"#\"\n      ? this.setState({\n          tasks: [\n            ...this.state.tasks,\n            { type: \"task\", value: this.state.input, done: false }\n          ]\n        })\n      : this.setState({\n          tasks: [\n            ...this.state.tasks,\n            { type: \"heading\", value: this.state.input.substring(1) }\n          ]\n        });\n  }\n\n  // Delete Commands\n  clearDone() {\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => !task.done);\n    this.setState({ tasks: tasks });\n  }\n\n  clearAll() {\n    let tasks = [...this.state.tasks];\n    tasks = [];\n    this.setState({ tasks: tasks });\n  }\n\n  deleteTask(index) {\n    console.log(this.state.tasks);\n    let tasks = [...this.state.tasks];\n\n    console.log(index);\n    tasks.splice(index, 1);\n    this.setState({ tasks: tasks });\n  }\n\n  // Other\n  toggleDone(index) {\n    // Shallow copies of state\n    let tasks = [...this.state.tasks];\n    let task = { ...tasks[index] };\n\n    //Modifying shallow copies\n    task.done = !task.done;\n\n    tasks[index] = task;\n\n    this.setState({ tasks: tasks });\n  }\n\n  change(old_array, old_index, new_index) {\n    return old_array.map((item, index, array) => {\n      if (index === old_index) return array[new_index];\n      else if (index === new_index) return array[old_index];\n      else return item;\n    });\n  }\n\n  shiftUp(index) {\n    let tasks = [...this.state.tasks];\n    if (index > 0) {\n      tasks = this.change(tasks, index, index - 1);\n    }\n    this.setState({ tasks: tasks });\n  }\n\n  shiftDown(index) {\n    let tasks = [...this.state.tasks];\n    if (index < tasks.length - 1) {\n      tasks = this.change(tasks, index, index + 1);\n    }\n    this.setState({ tasks: tasks });\n  }\n\n  render() {\n    const {\n      handleChange,\n      handleSubmit,\n      toggleDone,\n      clearDone,\n      clearAll,\n      shiftUp,\n      shiftDown,\n      deleteTask\n    } = this;\n    return (\n      <div>\n        <Input handleChange={handleChange} handleSubmit={handleSubmit} />\n        <TaskDisplay\n          tasks={this.state.tasks}\n          doneTask={toggleDone}\n          clearDone={clearDone}\n          clearAll={clearAll}\n          shiftUp={shiftUp}\n          shiftDown={shiftDown}\n          deleteTask={deleteTask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}