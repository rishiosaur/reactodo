{"version":3,"sources":["components/InputTask.jsx","components/heading.jsx","components/statusdisplay.jsx","components/TaskDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","react_default","a","createElement","onSubmit","this","props","handleSubmit","TextField","id","label","margin","onChange","handleChange","React","Component","Heading","H","heading","value","style","display","StatusDisplay","tasks","filter","task","type","tasksdone","map","done","length","tasksleft","percent","Typography","variant","fontWeight","color","LinearProgress","TaskDisplay","_this","ButtonGroup","marginLeft","Button","onClick","clearDone","clearAll","statusdisplay","index","key","marginBottom","Card","maxWidth","marginRight","size","CardContent","CardActions","Chip","clickable","deleteIcon","Cached_default","Done_default","onDelete","doneTask","IconButton","shiftUp","disabled","ExpandLess_default","shiftDown","ExpandMore_default","deleteTask","Delete_default","borderColor","components_heading","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","bind","assertThisInitialized","toggleDone","event","setState","target","preventDefault","lastIndexOf","charAt","concat","toConsumableArray","substring","console","log","splice","objectSpread","old_array","old_index","new_index","item","array","change","InputTask_Input","TaskDisplay_TaskDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9526f78.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\nexport default class Input extends React.Component {\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit}>\n      <TextField\n\n        id=\"standard-name\"\n        label=\"Input\"\n        margin=\"normal\"\n        onChange={this.props.handleChange}\n      />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nclass Heading extends React.Component {\n  render() {\n    // Temporary component, meant for generating the heading\n    let H = this.props.heading < 7 ? \"h\" + this.props.heading : \"h2\";\n\n    let value = this.props.value;\n    return <H style={{ display: 'inline' }}>{value}</H>;\n  }\n}\n\nexport default Heading;\n","import React from \"react\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass StatusDisplay extends React.Component {\n  render() {\n    let tasks = this.props.tasks.filter(task => task.type !== \"heading\");\n    let tasksdone = tasks.map(task => task.done).filter(task => task).length;\n    let tasksleft =\n      tasks.length - tasks.map(task => task.done).filter(task => task).length;\n    let percent = (tasksdone / tasks.length) * 100;\n    return (\n      <div>\n        <br/>\n        <Typography variant=\"h3\" style={{fontWeight: 500}}>\n          {tasksdone} done,{\" \"}\n          <span style={{ color: tasksleft > 0 ? \"red\" : \"green\" }}>\n            {tasksleft} left\n          </span>\n          . Total: {tasks.length}\n          <br />\n        </Typography><br/>\n        <LinearProgress\n          variant=\"determinate\"\n          value={percent}\n          color={percent === 100 ? \"primary\" : \"secondary\"}\n        />\n      </div>\n    );\n  }\n}\n\nexport default StatusDisplay;\n","import React from \"react\";\nimport Heading from \"./heading.jsx\";\nimport StatusDisplay from \"./statusdisplay.jsx\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Chip from \"@material-ui/core/Chip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\n\nexport default class TaskDisplay extends React.Component {\n  render() {\n    return (\n      <div>\n        {/* Buttons! */}\n\n        <ButtonGroup style={{ marginLeft: \"auto\" }}>\n          <Button onClick={this.props.clearDone}>Clear Done</Button>\n          <Button onClick={this.props.clearAll}>Clear All</Button>\n        </ButtonGroup>\n        {/* Tasks status display */}\n        <StatusDisplay tasks={this.props.tasks} />\n        {/* The actual Display of it */}\n        <br />\n        <div>\n          {this.props.tasks.map((task, index) => (\n            <div key={index} style={{ marginBottom: \"2rem\" }}>\n              {task.type !== \"heading\" ? (\n                // If task is task, do this\n                <div>\n                  <Card\n                    style={{\n                      maxWidth: \"30rem\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\"\n                    }}\n                    size=\"small\"\n                  >\n                    <CardContent>\n                      <Typography variant=\"h4\">\n                        {task.done ? <strike>{task.value}</strike> : task.value}\n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                      <Chip\n                        label={task.done ? \"Reopen\" : \"Finish\"}\n                        clickable\n                        color={!task.done ? \"primary\" : \"secondary\"}\n                        deleteIcon={!task.done ? <DoneIcon /> : <CachedIcon />}\n                        onDelete={() => this.props.doneTask(index)}\n                      />\n                      <ButtonGroup\n                        style={{ marginLeft: \"auto\", marginRight: \"1rem\" }}\n                      >\n                        <IconButton\n                          onClick={() => this.props.shiftUp(index)}\n                          disabled={index === 0}\n                        >\n                          <ExpandLessIcon />\n                        </IconButton>\n                        <IconButton\n                          onClick={() => this.props.shiftDown(index)}\n                          disabled={index + 1 === this.props.tasks.length}\n                        >\n                          <ExpandMoreIcon />\n                        </IconButton>\n                      </ButtonGroup>\n                      <IconButton\n                        color=\"secondary\"\n                        onClick={() => this.props.deleteTask(index)}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </CardActions>\n                  </Card>\n                </div>\n              ) : (\n                // If the task is a heading, create an h2\n                <div\n                  style={{\n                    maxWidth: \"30rem\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    borderColor: \"black\"\n                  }}\n                >\n                  <Heading heading={task.heading} value={task.value} />\n                  <br />\n\n                  <ButtonGroup\n                    style={{ marginLeft: \"auto\", marginRight: \"1rem\" }}\n                  >\n                    <IconButton\n                      onClick={() => this.props.shiftUp(index)}\n                      disabled={index === 0}\n                    >\n                      <ExpandLessIcon />\n                    </IconButton>\n                    <IconButton\n                      onClick={() => this.props.shiftDown(index)}\n                      disabled={index + 1 === this.props.tasks.length}\n                    >\n                      <ExpandMoreIcon />\n                    </IconButton>\n                    <IconButton\n                      color=\"secondary\"\n                      onClick={() => this.props.deleteTask(index)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ButtonGroup>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/InputTask.jsx\";\nimport TaskDisplay from \"./components/TaskDisplay.jsx\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      input: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleDone = this.toggleDone.bind(this);\n    this.clearDone = this.clearDone.bind(this);\n    this.clearAll = this.clearAll.bind(this);\n    this.shiftUp = this.shiftUp.bind(this);\n    this.shiftDown = this.shiftDown.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n  }\n\n  // Handle Events\n  handleChange(event) {\n    this.setState({ input: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.state.input.length > 0) {\n      let heading = this.state.input.lastIndexOf(\"#\");\n      this.state.input.charAt(0) !== \"#\"\n        ? this.setState({\n            tasks: [\n              ...this.state.tasks,\n              { type: \"task\", value: this.state.input, done: false }\n            ]\n          })\n        : this.setState({\n            tasks: [\n              ...this.state.tasks,\n              {\n                type: \"heading\",\n                value: this.state.input.substring(heading + 1),\n                heading: heading + 1\n              }\n            ]\n          });\n    }\n  }\n\n  // Delete Commands\n  clearDone() {\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => !task.done);\n    this.setState({ tasks: tasks });\n  }\n\n  clearAll() {\n    let tasks = [...this.state.tasks];\n    tasks = [];\n    this.setState({ tasks: tasks });\n  }\n\n  deleteTask(index) {\n    console.log(this.state.tasks);\n    let tasks = [...this.state.tasks];\n\n    console.log(index);\n    tasks.splice(index, 1);\n    this.setState({ tasks: tasks });\n  }\n\n  // Other\n  toggleDone(index) {\n    // Shallow copies of state\n    let tasks = [...this.state.tasks];\n    let task = { ...tasks[index] };\n\n    //Modifying shallow copies\n    task.done = !task.done;\n\n    tasks[index] = task;\n\n    this.setState({ tasks: tasks });\n  }\n\n  change(old_array, old_index, new_index) {\n    return old_array.map((item, index, array) => {\n      if (index === old_index) return array[new_index];\n      else if (index === new_index) return array[old_index];\n      else return item;\n    });\n  }\n\n  shiftUp(index) {\n    let tasks = [...this.state.tasks];\n    if (index > 0) {\n      tasks = this.change(tasks, index, index - 1);\n    }\n    this.setState({ tasks: tasks });\n  }\n\n  shiftDown(index) {\n    let tasks = [...this.state.tasks];\n    if (index < tasks.length - 1) {\n      tasks = this.change(tasks, index, index + 1);\n    }\n    this.setState({ tasks: tasks });\n  }\n\n  render() {\n    const {\n      handleChange,\n      handleSubmit,\n      toggleDone,\n      clearDone,\n      clearAll,\n      shiftUp,\n      shiftDown,\n      deleteTask\n    } = this;\n    return (\n      <div>\n        <Input handleChange={handleChange} handleSubmit={handleSubmit} />\n        <TaskDisplay\n          tasks={this.state.tasks}\n          doneTask={toggleDone}\n          clearDone={clearDone}\n          clearAll={clearAll}\n          shiftUp={shiftUp}\n          shiftDown={shiftDown}\n          deleteTask={deleteTask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}